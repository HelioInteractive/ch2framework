// Rem output with px fallback

@mixin font-size($sizeValue: 1) {
	font-size: ($sizeValue * 16) * 1px;
	font-size: $sizeValue * 1rem;

	@media screen and (max-width: $bp_phone) {
		font-size: ($sizeValue * 14) * 1px;
		font-size: $sizeValue * .875rem;
	}
}

// Center block
@mixin center-block {
	display: block;
	margin-left: auto;
	margin-right: auto;
}

// Clearfix
@mixin clearfix() {
	content: "";
	display: table;
	table-layout: fixed;
}

// Clear after (not all clearfix need this also)
@mixin clearfix-after() {
	clear: both;
}

/*
Extends a divs background to fill the viewport on both sides,
only ONE color is needed, additional arguments allow to specify left and right "bar" colors
Remember html and body element should have overflow-x hidden to prevent scrollbars.

color 1 will determine ALL the colors, color 2 overrides outside colors, color 3 overrides right side one.
*/

@mixin wide-background-color($color1, $color2:$color1, $color3:$color2) {
	background-color: $color1;
	position: relative;
	&:before, &:after {
		z-index: 0;
		content: '';
		position: absolute;
		background-color: $color2;
		top: 0;
		bottom: 0;
		left: -999%;
		right: 100%;
	}
	&:after {
		background-color: $color3;
		left: 100%;
		right: -999%;
	}
}



/*
This mixin helps with fonts that could potentially get TOO small while scaling off of the general design.
 */
@mixin small-font($fullSize) {
	font-size: calc(12px + (#{$fullSize} - 12) * (100vw - 350px) / (1300 - 350));
}


/*
Buttons Mixins

*/


/* Variables */
$default: #663399;
$success: #7fff00;
$warning: #ffa500;
$danger: #b22222;
$black: #222;
$white: #fff;

/* Map button styles
 each of these styles will produce a predictable button colored based on the variables above. e.g.:

 .btn-style-default will produce a solid purple button while .btn-default-o will produce a ghost button. additional styles can be added easily below e.g. black: $black would allow for button .btn-black that would always use black for its color..
 */
$buttons: (
		default: $default,
		success: $success,
		warning: $warning,
		danger: $danger
);

[class^="btn"], button {
	padding: 6px 12px; //change to REM to match typography
	transition: all 120ms ease;
	border-radius: 1px;
	/* Button reset */
	background-color: transparent;
	color: $black;
	border: 1px solid rgba(0,0,0,0.25);
	&:hover {
		border-color: rgba(0,0,0,0.5);
		text-decoration: none;
	}
}

@mixin btn-style($color, $ghost) {
	@if $ghost {
		background-color: transparent;
		color: $color;
	} @else {
		background-color: $color;
		color: #fff;
	}
	border-color: $color;
	&:hover {
		@if $ghost {
			background-color: $color;
			border-color: $color;
		} @else {
			background-color: darken($color, 5%);
			border-color: darken($color, 5%);
		}
		color: $white;
	}
}

@each $key, $value in $buttons {
	.btn-#{$key}, .button-#{$key},  {
		@include btn-style($value, false);
	}
	.btn-#{$key}-o, .button-#{$key}-o {
		@include btn-style($value, true);
	}
}
